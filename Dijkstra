#include<bits/stdc++.h>
using namespace std;
#define ll long long
const int N = 1e5+10;
const int INF = 1e9+10;

vector<pair<int, int> > g[N];

int dijktra(int source, int n, vector<pair<int, int> > g[N]){
	vector<int> vis(N, 0);
	vector<int> dist(N, INF);

	set<pair<int, int> > st;

	st.insert({0, source});
	dist[source] = 0;

	while(st.size() > 0){	
		
		auto node = *st.begin();
		int v_dist  = node.first;
		int value = node.second;
		st.erase(st.begin());
		
		if(vis[value] == 1) continue;
		vis[value] = 1;		

		for(auto child : g[value]){
			int child_v = child.first;
			int wt = child.second;
			if(wt + dist[value] < dist[child_v]){
				dist[child_v] = wt + dist[value];
				st.insert({dist[child_v], child_v});
			}
		}
	}
		int ans = 0;
		for(int i=0; i<=n; i++){
			if(dist[i] == INF) return -1;
			ans = max(ans, dist[i]);
		}
		return ans;
	
}

// int networkDelayTime(vector<vector<int>>& times, int n, int k) {
//         vector<pair<int, int> > g[N];

//         for (auto vec : times)
//         {
//         	g[vec[0]].push_back({vec[1], vec[2]});
//         }

//         return dijktra(k, n, g);

    
//     }

int main()
{
	ll n,m;
	cin >> n >> m;

	for(int i=0; i<m; i++){
		int x, y, wt;
		cin >> x >> y >> wt;
		g[x].push_back({y, wt});
	}

}
